#!/bin/sh
# The contents of this file are subject to the Interbase Public
# License Version 1.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy
# of the License at http://www.Inprise.com/IPL.html
#
# Software distributed under the License is distributed on an
# "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
# or implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code was created by Inprise Corporation
# and its predecessors. Portions created by Inprise Corporation are
# Copyright (C) Inprise Corporation.
#
# All Rights Reserved.
# Contributor(s): ______________________________________.
#$Id$
# Shell script to set up the InterBase directory structure
# And now the super server directory structure  




#------------------------------------------------------------------------
# Prompt for response, store result in Answer

Answer=""

AskQuestion() {
    Test=$1
    DefaultAns=$2
    echo -n "${1}"
    Answer="$DefaultAns"
    read Answer 
}


#------------------------------------------------------------------------
# Prompt for yes or no answer - returns non-zero for no

AskYNQuestion() {
    while echo -n "${*} (y/n): "
    do
        read answer rest
        case $answer in
        [yY]*)
            return 0
            ;;
        [nN]*)
            return 1
            ;;
        *)
            echo "Please answer y or n"
            ;;
        esac
    done
}



#------------------------------------------------------------------------
#
# In order to build the super directories 
# The old one is deleted (if it exists) and a new one is created
# and the source copied from the classic ones.
#
#    refreshLink ../../$ClassicDirName/[a-z]*[^oa] . 
#    is an attempt not to catch .o and .a files if redoing setup
#

buildSuperDir() {
    ClassicDirName=$1
    SuperDirName="super/$ClassicDirName"

    if [ -d $SuperDirName ] 
     then
      rm -rf $SuperDirName
    fi

    mkdir -p $SuperDirName

    cd $SuperDirName
    ln -s ../../$ClassicDirName/[a-z]*[^oa] .  
    cd ../..

}


#------------------------------------------------------------------------
#
# Refresh a link, if it already exists delete it then recreate it
# otherwise just create it.
#

refreshLink() {
   RealFile=$1
   LinkFile=$2
   
   if [ -L $LinkFile ]
     then
       rm -f $LinkFile
   fi

   ln -s $RealFile $LinkFile

}


#------------------------------------------------------------------------
#
# Copy file if it exists
#

copyIfExists() {
   OldFile=$1
   NewFile=$2
   
   if [ -f $OldFile ]
     then
       cp $OldFile $NewFile
   fi

}


#------------------------------------------------------------------------
#
# remove file if it exists
#

rmIfExists() {
   FileName=$1
   
   if [ -f $FileName ]
     then
       rm -f $FileName
   fi

}



#------------------------------------------------------------------------
# Check initial variables required for build of interbase

checkVariables() {

     if [ "$INTERBASE" = "" ]
       then
         if [ $SYS_TYPE = 'FREEBSD' ]
           then
             export INTERBASE="/usr/interbase"
           else
             export INTERBASE="/opt/interbase"
	 fi
     fi

     if [ "$ISC_PASSWORD" = "" ]
       then
         export ISC_USER="sysdba"
         export ISC_PASSWORD="masterkey"
     fi


     echo ""
     echo ""
     echo ""
     echo "- Firebird - Database build setup ----------------------------"
     echo "" 
     echo "From command line :"
     echo "Host  OS Type                          : $BuildHostType"
     echo "Build Type                             : $BuildBuildType"
     echo "Build Master Source Dir                : $MasterSourceDir"
     echo ""
     echo "From env. variables:"
     echo "INTERBASE    (installed database root) : $INTERBASE "
     echo "ISC_USER     (admin user)              : $ISC_USER"
     echo "ISC_PASSWORD (admin password)          : $ISC_PASSWORD"
     echo "" 
     echo "If you wish to have different values please set them before running" 
     echo "this script"
     echo "--------------------------------------------------------------"
     echo ""
     AskQuestion "Press return to continue"

}

#== Main Program ========================================================


#


PATH=.:$PATH

if [ $# != 3 ]
then
    echo 'Usage: setup_dirs {AIX   | AP      | AX   } {DEV}  master_source_dir '
        echo '                  {DELTA | DG      | EPSON} {PROD}'
        echo '                  {HP700 | HP800   | HP9.0 | HP10 }'
        echo '                  {IMP   | MU      | SCO  }'
        echo '                  {SGI   | SOLARIS | SUN4 }'
        echo '                  {UNIXWARE | AIX_PPC | LINUX }'
        echo '                  {FREEBSD}'
        exit 1
fi

export BuildHostType=$1
export BuildBuildType=$2
export MasterSourceDir=$3

checkVariables

SYS_TYPE=$1
if [ "$1" = 'SUN4' -o "$1" = 'SUN3_4' -o "$1" = 'SUN386I' ]; then
    SYS_TYPE=SUNOS4
fi
if [ $1 = 'AX' -o $1 = 'AP' ]; then
    SYS_TYPE=APOLLO
fi
if [ $1 = 'SUN3_3' ]; then
    SYS_TYPE=SUNOS3
fi
#
LOCK_HEADER=lock_header_shmem
if [ $SYS_TYPE = 'SUNOS4' -o $1 = 'DG' -o $1 = 'SOLARIS' ]; then
    LOCK_HEADER=lock_header_mmap
fi
#
echo "- Setting up the superserver directory structure"
echo ""

mkdir -p super/client 

# Now populate the directories super/* with symlinks to all the source
# files contained in the corresponding top-level directories.

for dir in alice burp dsql intl journal jrd lock register remote utilities wal
  do
    buildSuperDir $dir
  done

#
refreshLink . source
refreshLink builds/make.interbase make_kit
refreshLink builds/original/build_kit build_kit
refreshLink builds/original/set_prot set_prot
refreshLink builds/original/unset_prot unset_prot
refreshLink builds/original/add_template add_template
refreshLink builds/original/mpm_template mpm_template
refreshLink builds/original/mpp_template mpp_template
refreshLink builds/original/put_template put_template
refreshLink builds/original/fetch_comp fetch_comp
refreshLink builds/original/maketar maketar
refreshLink builds/refresh refresh
refreshLink builds/refresh.all refresh.all
refreshLink builds/special_opt special_opt

if [ $1 = 'SCO' ]; then
        refreshLink builds/original/sco_ship sco_ship
fi


if [ $SYS_TYPE = 'LINUX' -o $SYS_TYPE = 'FREEBSD' ]
then
        if [ -d interbase ] 
          then
            echo ""
            echo ""
            echo "*** Warning *** "
            echo "    The installation target directory:"
            echo "       `pwd`/interbase"
            echo "    Already exits press return to delete this directory or ^C to abort."
            echo "*** Warning *** "
            echo "" 
            AskQuestion "Press return to continue or ^C to abort"
            rm -rf interbase
            echo "Deleted."
            echo ""
        fi
        mkdir interbase
        cd interbase
        cp $INTERBASE/interbase.msg .
        cp $INTERBASE/isc4.gdb .
        copyIfExists $INTERBASE/ib_license.dat .
        mkdir bin
        cp $INTERBASE/bin/gpre bin
        cp $INTERBASE/bin/gbak bin
        copyIfExists $INTERBASE/bin/gds_lock_mgr bin
        mkdir lib
        mkdir help
        cp $INTERBASE/help/help.gdb help
        mkdir UDF
        mkdir -p examples/v5
        mkdir include
# create metadata.gdb (run one level above root) 
        if [ ! -f ../metadata.gdb ]; then
                $INTERBASE/bin/isql -i ../builds_win32/original/metadata.sql
        fi
#
        cd ..
#
# for purely legal reasons
        rmIfExists isc.gdb
        cp $INTERBASE/isc4.gdb isc.gdb
        rmIfExists jrd/isc.gdb
# replace old "yachts"
        cd jrd
        rmIfExists yachts.gdb
        refreshLink ../metadata.gdb yachts.gdb
        cd ..
        cd super/jrd                                  # TMC 081100
        refreshLink ../../jrd/yachts.gdb yachts.gdb   # TMC 081100
        cd ../..                                      # TMC 081100 

echo "- Creating messages database"
echo ""

# Create the messages database from the gbak version
        cd msgs
        if [ ! -f msgs.gdb ]; then
                $INTERBASE/bin/gbak -r msg.gbak msg.gdb
        fi
        cd ..
#
# The following two files are not needed on linux, as they have already
# been copied to /usr/lib as part of the normal install
   copyIfExists $INTERBASE/lib/gds.so.0 jrd/libgds.so
   copyIfExists $INTERBASE/lib/gds_pyxis.a jrd/libgds_pyxis.a
fi

echo "- Setting up makefile and database links"
echo ""

# Alice
refreshLink .. alice/source
refreshLink source/jrd/yachts.gdb alice/yachts.lnk
refreshLink source/builds/make.alice alice/makefile
refreshLink .. super/alice/source
refreshLink source/jrd/yachts.gdb super/alice/yachts.lnk
refreshLink source/builds/make.alice_ss super/alice/makefile

# Burp
refreshLink .. burp/source
refreshLink source/jrd/yachts.gdb burp/yachts.lnk
refreshLink source/builds/make.burp burp/makefile
refreshLink .. super/burp/source
refreshLink source/jrd/yachts.gdb super/burp/yachts.lnk
refreshLink source/builds/make.burp_ss super/burp/makefile

# Client
refreshLink .. super/client/source
refreshLink source/builds/make.client super/client/makefile

# Csv
refreshLink .. csv/source
refreshLink source/builds/make.csv csv/makefile

# Dsql
refreshLink .. dsql/source
refreshLink source/jrd/yachts.gdb dsql/yachts.lnk
refreshLink source/builds/make.dsql dsql/makefile
refreshLink .. super/dsql/source
refreshLink source/jrd/yachts.gdb super/dsql/yachts.lnk
refreshLink source/builds/make.dsql_ss super/dsql/makefile

# Dudley
refreshLink .. dudley/source
refreshLink source/jrd/yachts.gdb dudley/yachts.lnk
refreshLink source/builds/make.dudley dudley/makefile

# V3 Examples
refreshLink .. examples/source
refreshLink $3/examples/atlas.gdb examples/atlas.gdb
refreshLink $3/examples/c_guide.gdb examples/c_guide.gdb
refreshLink $3/examples/emp.gdb examples/emp.gdb
refreshLink $3/examples/nc_guide.gdb examples/nc_guide.gdb
refreshLink $3/examples/slides.gdb examples/slides.gdb
refreshLink $3/examples/stocks.gdb examples/stocks.gdb
refreshLink source/builds/make.examples examples/makefile

# V4 Examples
refreshLink .. example4/source
refreshLink source/builds/make.example4 example4/makefile
refreshLink $3/example4/empbuild.gdb example4/empbuild.gdb

# V5 Examples
refreshLink .. example5/source
refreshLink source/builds/make.example5 example5/makefile
refreshLink $3/example5/empbuild.gdb example5/empbuild.gdb

# ExtLib
refreshLink .. extlib/source
refreshLink source/builds/make.extlib extlib/makefile

# Gpre
refreshLink .. gpre/source
refreshLink source/jrd/yachts.gdb gpre/yachts.lnk
refreshLink source/builds/make.gpre gpre/makefile

# Intl
refreshLink .. intl/source
refreshLink source/builds/make.intl intl/makefile
refreshLink .. super/intl/source
refreshLink source/builds/make.intl_ss super/intl/makefile

# Isql
refreshLink .. isql/source
refreshLink source/jrd/yachts.gdb isql/yachts.lnk
refreshLink source/builds/make.isql isql/makefile
# Journal
refreshLink .. journal/source
refreshLink $3/journal/journal.gdb journal/journal.gdb
refreshLink $3/journal/journal_vms.gdb journal/journal_vms.gdb
refreshLink source/builds/make.journal journal/makefile
refreshLink .. super/journal/source
refreshLink $3/journal/journal.gdb super/journal/journal.gdb
refreshLink source/builds/make.journal_ss super/journal/makefile
# Jrd
refreshLink .. jrd/source
refreshLink yachts.gdb jrd/yachts.lnk
refreshLink source/msgs/msg.gdb jrd/msg.gdb  ## TMC 081100
#refreshLink $3/jrd/yachts.gdb jrd/yachts.gdb
#refreshLink $3/jrd/isc.gdb jrd/isc.gdb
refreshLink source/builds/make.jrd jrd/makefile
refreshLink source/pipe/allp.c jrd/allp.c
refreshLink source/pipe/foot.c jrd/foot.c
refreshLink source/pipe/head.c jrd/head.c
refreshLink .. super/jrd/source
#refreshLink yachts.gdb super/jrd/yachts.lnk
#refreshLink $3/jrd/isc.gdb super/jrd/isc.gdb
refreshLink gds_ss.a super/jrd/libgds_ss.a
refreshLink $3/msgs/msg.gdb super/jrd/msg.gdb
refreshLink source/builds/make.jrd_ss super/jrd/makefile
refreshLink source/builds/original/bind_dsql.apollo dsql/bind_dsql
refreshLink source/builds/original/bind_gdslib.apollo jrd/bind_gdslib
refreshLink source/builds/original/bind_gds5.apollo jrd/bind_bridge
refreshLink source/builds/original/bind_pyxis.apollo pyxis/bind_pyxis
refreshLink source/builds/original/bind_csilib.apollo csv/bind_csilib
refreshLink source/builds/original/bind_remotelib.apollo remote/bind_remotelib
if [ $1 = 'DELTA' -o $1 = 'IMP' -o $1 = 'MU' -o $1 = 'NXT' -o $1 = 'SCO' -o $1 = 'UL' ]; then
    refreshLink source/interbase/lib/gds_b.a jrd/libgds_b.a
else
    refreshLink gds_b.a jrd/libgds_b.a
fi
if [ $SYS_TYPE = 'SUNOS4' ]; then
    refreshLink source/interbase/lib/gdslib.so.1.0 jrd/libgdslib.so.1.0
    refreshLink source/interbase/lib/gdslib.so.0.1 jrd/libgdslib.so.0.1
    refreshLink source/interbase/lib/gdsflib.so.0.0 jrd/libgdsflib.so.0.0
    refreshLink source/interbase/lib/gds_pyxis.a jrd/libgds_pyxis.a
fi
if [ $1 = 'AIX' -o $1 = 'AIX_PPC' -o $1 = 'DECOSF' -o $1 = 'SGI' ]; then
    refreshLink source/builds/original/bind_gds.generic jrd/gds.bind
    refreshLink source/builds/original/bind_gds5.generic jrd/gds5.bind
fi
if [ $1 = 'AIX' -o $1 = 'AIX_PPC' ]; then
    refreshLink source/interbase/lib/gdsshr.a jrd/libgdsshr.a
fi
if [ $1 = 'DG' ]; then
    refreshLink source/interbase/lib/gds.so.0 jrd/libgds.so.0
    refreshLink source/jrd/libgds.so.0 jrd/libgds.so
    refreshLink source/interbase/lib/gdsf.so jrd/libgdsf.so
    refreshLink source/interbase/lib/gds_pyxis.a jrd/libgds_pyxis.a
fi
if [ $1 = 'EPSON' -o $1 = 'DECOSF' -o $1 = 'UNIXWARE' -o $1 = 'M88K' ]; then
    refreshLink source/interbase/lib/gds.so.0 jrd/libgds.so.0
    refreshLink source/jrd/libgds.so.0 jrd/libgds.so
fi
if [ $1 = 'HP700' -o $1 = 'HP9.0' -o $1 = 'HP10' ]; then
    if [ -d super ]; then
       refreshLink source/builds/original/bind_gds.hp super/remote/gds.bind
       refreshLink source/builds/original/bind_gds.hp super/client/gds.bind
    fi
    refreshLink source/interbase/lib/gds.sl jrd/libgds.sl
    refreshLink source/interbase/lib/gds_pyxis.a jrd/libgds_pyxis.a
    refreshLink source/builds/original/bind_gds.hp jrd/gds.bind
    refreshLink source/builds/original/bind_gds5.hp jrd/gds5.bind
fi
if [ $1 = 'SOLARIS' -o $1 = 'SGI' -o $1 = 'SCO_EV' ]; then
    refreshLink source/interbase/lib/gdsmt.so.1 jrd/libgdsmt.so.1
    refreshLink source/interbase/lib/gdsmt.so.0 jrd/libgdsmt.so.0
    refreshLink source/jrd/libgdsmt.so.0 jrd/libgdsmt.so
    refreshLink source/interbase/lib/gds.so.0 jrd/libgds.so.0
    refreshLink source/jrd/libgds.so.0 jrd/libgds.so
    refreshLink source/interbase/lib/gds_pyxis.a jrd/libgds_pyxis.a
fi
if [ $1 = 'SCO' -o $1 = 'IMP' ]; then
    refreshLink source/interbase/lib/gds_s.a jrd/libgds_s.a
    refreshLink source/interbase/lib/gdsf_s.a jrd/libgdsf_s.a
    if [ $1 = 'SCO' ]; then
        refreshLink source/interbase/lib/gds_pyxis.a jrd/libgds_pyxis.a
    fi
fi
if [ $1 = 'IMP' ]; then
    refreshLink source/builds/original/bind_gds_s.im jrd/gds_s.bind
    refreshLink source/builds/original/bind_gdsf_s.im jrd/gdsf_s.bind
fi
if [ $1 = 'SCO' ]; then
    refreshLink source/builds/original/bind_gds_s.sco jrd/gds_s.bind
    refreshLink source/builds/original/bind_gdsf_s.sco jrd/gdsf_s.bind
fi
# Lock
refreshLink .. lock/source
refreshLink source/builds/make.lock lock/makefile
refreshLink .. super/lock/source
refreshLink source/builds/make.lock_ss super/lock/makefile
refreshLink source/lock/$LOCK_HEADER lock/lock_header
# Msgs
refreshLink .. msgs/source
refreshLink source/msgs/msg.gdb msgs/master_msg_db # TMC 081100
#refreshLink master_msg_db msgs/msg.gdb
refreshLink source/builds/make.msgs msgs/makefile
# Pipe
refreshLink .. pipe/source
refreshLink source/builds/make.pipe pipe/makefile
# Pyxis
refreshLink .. pyxis/source
refreshLink source/jrd/yachts.gdb pyxis/yachts.lnk
refreshLink $3/pyxis/forms.gdb pyxis/forms.gdb
refreshLink source/interbase/lib/gds_pyxis.a pyxis/libgds_pyxis.a
refreshLink source/builds/make.pyxis pyxis/makefile
# Qli
refreshLink .. qli/source
refreshLink source/jrd/yachts.gdb qli/yachts.lnk
refreshLink source/jrd/yachts.gdb qli/yachts.link
#refreshLink $3/qli/help.gdb qli/help.gdb ?
refreshLink $3/interbase/help/help.gdb qli/help.gdb
refreshLink $3/interbase/help/help.gdb qli/master_help_db
refreshLink source/builds/make.qli qli/makefile
# Register
# Probably registration code - no source from Inprise
#refreshLink .. register/source
#refreshLink .. super/register/source
# Remote
refreshLink .. remote/source
refreshLink source/builds/make.remote remote/makefile
refreshLink .. super/remote/source
refreshLink source/builds/make.remote_ss super/remote/makefile
# Super
refreshLink . super/source
refreshLink ../builds super/builds
refreshLink ../interbase super/interbase
refreshLink builds/original/fetch_comp super/fetch_comp
refreshLink builds/special_opt super/special_opt

if [ $1 = "DG" ]; then
    refreshLink source/interbase/examples/v3/gds_blk_data.f testing/gds_blk_data.f
fi
# Utilities
refreshLink .. utilities/source
refreshLink source/isc.gdb jrd/isc.gdb
refreshLink source/isc.gdb utilities/isc.gdb
refreshLink source/jrd/yachts.gdb utilities/yachts.lnk
refreshLink source/builds/make.utilities utilities/makefile
refreshLink $3/utilities/rebuild.gdb utilities/rebuild.gdb
refreshLink .. super/utilities/source
refreshLink source/jrd/isc.gdb super/utilities/isc.gdb
refreshLink source/jrd/yachts.gdb super/utilities/yachts.lnk
refreshLink source/builds/make.utilities_ss super/utilities/makefile
refreshLink $3/utilities/rebuild.gdb super/utilities/rebuild.gdb
# Wal
refreshLink .. wal/source
refreshLink source/builds/make.wal wal/makefile
refreshLink .. super/wal/source
refreshLink source/builds/make.wal_ss super/wal/makefile
# Builds
refreshLink ../.. builds/original/source
# System specific directories
refreshLink .. builds/source
if [ $SYS_TYPE = 'SUNOS4' ]; then
    refreshLink original/install.sun4 builds/install
    refreshLink original/servers.isc builds/servers.isc
else
        refreshLink original/install.unix builds/install
        if [ $1 = 'SUN3_3' ]; then
            refreshLink original/servers.isc builds/servers.isc
        fi
fi
if [ $1 = 'MU' -o $1 = 'UL' ]; then
    refreshLink original/inetd.conf.ultrix builds/inetd.conf.isc
else
        if [ $1 = 'IMP' -o $1 = 'SCO' -o $1 = 'EPSON' ]; then
            refreshLink original/inetd.conf.psx builds/inetd.conf.isc
        else
            refreshLink original/inetd.conf.unx builds/inetd.conf.isc
        fi
fi


cd builds/original
chmod +x setup_prots
./setup_prots

# Save the production/development flag
echo "$1" > .platform_type    
cd ../..
chmod +x setup_build

./setup_build $2 

echo "- Directory setup is now complete!"
echo ""
echo "--------------------------------------------------------------"
echo ""
echo "The next step in building the Firebird database, is to run"
echo "the command:"
echo " \$build_kit builds SUPER|CLASSIC"
echo ""
